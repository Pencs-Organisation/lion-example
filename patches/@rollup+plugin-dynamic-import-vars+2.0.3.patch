diff --git a/node_modules/@rollup/plugin-dynamic-import-vars/dist/es/index.js b/node_modules/@rollup/plugin-dynamic-import-vars/dist/es/index.js
index 85daa10..f1bc8f5 100644
--- a/node_modules/@rollup/plugin-dynamic-import-vars/dist/es/index.js
+++ b/node_modules/@rollup/plugin-dynamic-import-vars/dist/es/index.js
@@ -2,6 +2,7 @@ import path from 'path';
 import { walk } from 'estree-walker';
 import MagicString from 'magic-string';
 import fastGlob from 'fast-glob';
+import { generate } from 'astring';
 import { createFilter } from '@rollup/pluginutils';
 
 class VariableDynamicImportError extends Error {}
@@ -150,6 +151,13 @@ function dynamicImportVariables({ include, exclude, warnOnError } = {}) {
           }
           dynamicImportIndex += 1;
 
+          let importArg;
+          if (node.arguments && node.arguments.length > 0) {
+            importArg = generate(node.arguments[0], { indent: '' })
+              .replace(/\n/g, '')
+              .replace(/"/g, "'");
+          }
+
           try {
             // see if this is a variable dynamic import, and generate a glob expression
             const glob = dynamicImportToGlob(node.source, code.substring(node.start, node.end));
@@ -172,7 +180,9 @@ function dynamicImportVariables({ include, exclude, warnOnError } = {}) {
             ms.prepend(
               `function __variableDynamicImportRuntime${dynamicImportIndex}__(path) {
   switch (path) {
-${paths.map((p) => `    case '${p}': return import('${p}');`).join('\n')}
+${paths
+  .map((p) => `    case '${p}': return import('${p}'${importArg ? `, ${importArg}` : ''});`)
+  .join('\n')}
 ${`    default: return new Promise(function(resolve, reject) {
       (typeof queueMicrotask === 'function' ? queueMicrotask : setTimeout)(
         reject.bind(null, new Error("Unknown variable dynamic import: " + path))
